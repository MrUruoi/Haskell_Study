Curried functions
Every function in Haskell officially only takes one parameter.
Putting a space between two things is simply 'function application'. The space is sort of like an operator and it has the highest precedence.
<pre>
*Main> max 4 5
5
*Main> (max 4) 5
5
</pre>

max :: Ord a => a -> a -> a
can also be written as
max :: Ord a => a -> (a -> a)
could be read as: max takes an 'a' and returns a function that takes an 'a' and returns an 'a'/

Some higher-orderism is in order

<pre>
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)
--
*Main> applyTwice (+3) 10
16
*Main> applyTwice (++ " HAHA") "HEY"
"HEY HAHA HAHA"
*Main> applyTwice ("HAHA " ++) "HEY"
"HAHA HAHA HEY"
*Main> applyTwice (3:) [1]
[3,3,1]
</pre>

<pre>
zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith' _ [] _ = []
zipWith' _ _ [] = []
zipWith' f (x:xs) (y:ys) = f x y : zipWith' f xs ys
--
*Main> zipWith' (+) [1,2,3] [1,1,1]
[2,3,4]
*Main> zipWith' max [1,2,3] [2,1,4]
[2,2,4]
*Main> zipWith' (++) ["qwer","asdf"] ["1234","5678"]
["qwer1234","asdf5678"]
*Main> zipWith' (zipWith' (*)) [[1,2], [3,4]] [[5,6], [7,8]] 
[[5,12],[21,32]]
</pre>

<pre>
-- flip' :: (a->b->c) -> (b->a->c)
-- flip' f = g
--    where g x y = f y x

flip' :: (a->b->c) -> b -> a -> c
flip' f y x = f x y
--
*Main> flip' zip [1,2,3,4,5] "hello"
[('h',1),('e',2),('l',3),('l',4),('o',5)]
*Main> zipWith (flip div) [2,2..] [10,8,6,4,2]
[5,4,3,2,1]
</pre>
Because functions are curried by default, the second pair of parentheses is really unnecessary, because '->' is right asssociative by default.
'(a->b->c) -> (b->a->c)' is the same as 
'(a->b->c) -> (b->(a->c))', which is the same as
'(a->b->c) -> b -> a -> c

map
<pre>
*Main> :t map
map :: (a -> b) -> [a] -> [b]
*Main> map (+3) [1,2,3,4,5]
[4,5,6,7,8]
*Main> map (++ "!") ["qwer", "asdf"]
["qwer!","asdf!"]
*Main> map (replicate 2) [1..3]
[[1,1],[2,2],[3,3]]
*Main> map (map (^2)) [[1,2], [3,4,5,6], [7,8]]
[[1,4],[9,16,25,36],[49,64]]
*Main> map fst [(1,2), (3,5), (6,3), (2,6), (2,5)]
[1,3,6,2,2]
</pre>

filter
<pre>
*Main> :t filter
filter :: (a -> Bool) -> [a] -> [a]
*Main> filter (3>) [1,5,2,3]
[1,2]
*Main> filter even [1..10]
[2,4,6,8,10]
*Main> let notNull x = not (null x) in filter notNull [[1,2],[],[]]
[[1,2]]
*Main> filter (`elem` ['a'..'z']) "hello WOW"
"hello"
</pre>

<pre>
quicksort :: (Ord a) => [a] -> [a]
quicksort [] = []
quicksort (x:xs) =
    let smallerSorted = quicksort (filter (<=x) xs)
        biggerSorted = quicksort (filter (>x) xs)
    in smallerSorted ++ [x] ++ biggerSorted
</pre>

Lambdas
Lambdas are basically anonymous functions that are used because we need some functions only once. To make a lambda, we write a '\' and then we write the paremeters, separated by space. After that comes a '->' and thne the function body.

<pre>
Prelude> zipWith (\a b -> a+b+1) [3,2,1] [2,4,7]
[6,7,9]
</pre>

Labdas are normally surrounded by parentheses unless we mean for them to extend all the way to the right. Here's something interestig: due to the way functions are curried by default, these two are equivalent.
<pre>
addThree :: (Num a) => a -> a -> a -> a
addThree x y z = z + y + z
--
addThree = \x -> \y -> \z => x + y + z
</pre>

 
Only folds and horse

foldl
<pre>
sum' :: (Num a) => [a] -> a
--sum' xs = foldl (\acc x -> acc+ x) 0 xs
--sum' xs = foldl (+) 0 xs
sum' = foldl (+) 0
</pre>
We can omit the 'xs' as the parameter because calling 'foldl (+) 0' will return a function that takes a list. Generally, if you hava a function like 'foo a = bar b a', you can rewrite it as 'foo = bar b', because of currying. 

<pre>
elem' :: (Eq a) => a -> [a] -> Bool
elem' y ys = foldl (\acc x -> if x == y then True else acc) False ys
</pre>


foldr
foldr works in a similar way to the left fold, only the accumulator eats up the values from the right.
Also, the left fold's binary function has the accumulator as the first parameter and tne current value as the second one(\acc x -> ...), the right fold's binary function has the current value as the first parameter and the accumulator as the secodnd on(\x acc -> ...).

<pre>
map' :: (a -> b) -> [a] -> [b]
map' f xs = foldr (\x acc -> f x : acc) [] xs
--
*Main> map' (+3) [1,2,3]
[4,5,6]
</pre>

Right folds work on infinite lists, whereas left ones don't. To put it plainy, if you take an infinite list at some point and you fold it up from the right, you'll eventually reach the beginning of the list. Howevver, if you take an infinite list at a point and you try fold it up from the left, you'll never reach an end.

The 'foldl1' and 'foldr1' functions work much like 'foldl' and 'foldr', only you don't need to provide them with an exiplicit starting value. They assume the first (or last) element of the list to be the starting value and then start the fold with the element next to it.

<pre>
maximum' :: (Ord a) => [a] -> a
maximum' = foldr1 (\acc x -> if x > acc then x else acc) 

reverse' :: [a] -> [a]
reverse' = foldl (\acc x -> x:acc) []
reverse' = foldl (flip (:)) []

product' :: (Num a) => [a] -> a
product' = foldr1 (*)

filter' :: (a->Bool) ->  [a] -> [a]
filter' p = foldr (\x acc -> if p x then x:acc else acc) []

head' :: [a] -> a
head' = foldr1 (\x _ -> x)

last' :: [a] -> a
last' = foldl1 (\_ x -> x)
</pre>

'scanl' and 'scanr' are like 'foldl' and 'foldr', only they report all the intermediate accumulator states in the form of a list.
There are also 'scanl1' and 'scanr1', which are analoguous to 'foldl1' and 'foldr1'.
Scans are used to monitor the progression of a function that can be implemented as a fold.
<pre>
*Main> scanl (+) 0 [3,5,2,1]
[0,3,8,10,11]
*Main> scanr (+) 0 [3,5,2,1]
[11,8,3,1,0]
*Main> scanl1 (\acc x -> if x > acc then x else acc) [3,4,5,9,2,1]
[3,4,5,9,9,9]
*Main> scanl (flip (:)) [] [3,2,1]
[[],[3],[2,3],[1,2,3]]
</pre>


Function composition
We do function composition with the '.' function, which is defined like so:
<pre>
(.) :: (b -> c) -> (a -> b) -> a -> c
f . g = \x -> f (g x)
</pre>
'f' must take as its parameter a value that has the same type as 'g's return value. So the resulting function takes a parameter of the same type that 'g' takes and returns a value of the same type that 'f' returns.
One of the uses for function composition is making functions on the fly to pass to other functions. Sure, can use lambdas for that, but many times, function composition is clearer and more concise.
<pre>
*Main> map (\x -> negate (abs x)) [-6,4,1,3]
[-6,-4,-1,-3]
*Main> map (negate . abs) [-6,4,1,3]
[-6,-4,-1,-3]
</pre>

<pre>
*Main> map (\xs -> negate (sum (tail xs))) [[1..5],[3..6],[1..7]]
[-14,-15,-27]
*Main> map (negate . sum . tail) [[1..5],[3..6],[1..7]]
[-14,-15,-27]
</pre>

But what about functions that take several parameters? Well, if we want to use then in function composition, we usually have to partially apply them just so much that each function takes just one parameter.
If you want to rewrite an expression with a lot of parentheses by using function composition, you can start by putting the last parameter of the innermost function after a '$' and then just composing all the other function calls, writing them without their last parameter and putting dots between them.
<pre>
*Main> sum (replicate 5 (max 6.7 8.9))
44.5
*Main> (sum . replicate 5 . max 6.7) 8.9
44.5
*Main> sum . replicate 5 . max 6.7 $ 8.9
44.5
</pre>

Another common use of function composition is defining functions in the so-called point free style (also called the pointless style).
<pre>
sum' :: (Num a) => [a] -> a
--sum' xs = foldl (+) 0 xs
sum' = foldl (+) 0
</pre>
Because of currying, we can omit the xs on both sides, because calling 'foldl (+) 0' creates a function that takes a list.

<pre>
--fn x = ceiling (negate (tan (cos (max 50 x))))
fn = ceiling . negate . tan . cos . max 50
</pre>

However, many times, writing a function in point free style can be less readable if a function is too complex. That's why making long chains of function composition is discouraged, although I plead guilty of something being too composition-happy. The prefered style is to use 'let' bindings to give labels to intermediary results or split the problem into sub-problems and then put it together so that the function makes sense to someone reading it instead of just making a huge composition chain
<pre>
oddSquareSum :: Integer
--oddSquareSum = sum (takeWhile (<10000) (filter odd (map (^2) [1..])))
--oddSquareSum = sum . takeWhile (<10000) . filter odd . map (^2) $ [1..]
oddSquareSum =
    let oddSqures = filter odd $ map (^2) [1..]
        belowLimit = takeWhile (<10000) oddSqures
    in sum belowLimit
</pre>
