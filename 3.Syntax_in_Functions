Pattern matching
We can define separate function bodies for different patters.

<pre>
lucky :: (Integral a) => a -> String
lucky 7 = "SEVEN!"
lucky x = "?"
-
*Main> lucky 7
"SEVEN!"
*Main> lucky 3
"?"
</pre>

<pre>
sayMe :: (Integral a) => a -> String
sayMe 1 = "One"
sayMe 2 = "Two"
sayMe 3 = "Three"
sayMe x = "Not between 1 and 3"
-
*Main> sayMe 2
"Two"
*Main> sayMe 4
"Not between 1 and 3"
</pre>

<pre>
factorial :: (Integral a) => a -> a
factorial 0 = 1
factorial n = n * factorial (n - 1)
-
*Main> factorial 3
6
</pre>

<pre>
addVectors :: (Num a) => (a, a) -> (a, a) -> (a, a)

-- addVectors a b = (fst a + fst b, snd a + snd b)
-- Better way
addVectors (x1, y1), (x2, y2) = (x1 + x2, y1 + y2
</pre>

<pre>
Prelude> let xs = [(1,3), (4,3), (2,4)]
Prelude> [a+b | (a,b) <- xs]
[4,7,6]
</pre>

<pre>
first :: (a, b, c) -> a
first (x, _, _) = x

second :: (a, b, c) -> b
second (_, y, _) = y

third :: (a, b, c) -> c
third (_, _, z) = z
-
*Main> third (2, 3, 5)
5
</pre>

You can match with the empty list [] or any pattern that involves ':' and the empty list. But since [1,2,3] is just syntactic sugar for 1:2:3[], you can also use the former pattern. A pattern like x:xs will bind the head of the list to x and the rest it to xs.
<pre>
head' :: [a] -> a
head' [] = error "Can't tell head on an empty list, dummy!"
head' (x:_) = x
-
*Main> head' [4,5,6]
4
*Main> head' "Hello"
'H'
*Main> head' []
*** Exception: Can't tell head on an empty list, dummy!
CallStack (from HasCallStack):
  error, called at test.hs:2:12 in main:Main
</pre>

<pre>
tell :: (Show a) => [a] -> String
tell [] = "empty"
tell (x:[]) = "has one element: " ++ show x
tell (x:y:[]) = "has two element: " ++ show x ++ ", " ++ show y
tell (x:y:z:[]) = "has three element: " ++ show x ++ ", " ++ show y ++ ", " ++ show z
-
*Main> tell ""
"empty"
*Main> tell []
"empty"
*Main> tell "abc"
"has three element: 'a', 'b', 'c'"
*Main> tell [1]
"has one element: 1"
</pre>

<pre>
length' :: (Num b) => [a] -> b
length' [] = 0
length' (_:xs) = 1 + length' xs
-
*Main> length' [1,2,3]
3
</pre>

'as patterns(2)' are a handy way of breaking something up according to a pattern and binding it to names whilst still keeping a reference to the whole thing. For instance, the pattern 'xs@(x:y:ys)'. This pattern will match exactly the same thing as 'x:y:ys' but you can easily get the whole list via xs instead of repeating yourself by typing out x:y:ys in the function body again.
<pre>
capital :: String -> String
capital "" = "Empty"
capital all@(x:xs) = "The first letter of " ++ all ++ " is " ++ [x]
-
*Main> capital "Dracula"
"The first letter of Dracula is D"
</pre>


guards 
guards are a way of testing whether some property of a value (or several of them) are true or false.
<pre>
bmiTell :: (RealFloat a) => a -> a -> String
bmiTell weight height
	| weight / height ^ 2 <= 18.5 = "underweight"
	| weight / height ^ 2 <= 25.0 = "normal"
	| weight / height ^ 2 <= 30.0 = "fat"
	| otherwise = "..."
-
*Main> bmiTell 85 1.90
"nomal"
</pre>

<pre>
myCompare :: (Ord a) => a -> a -> Ordering
a `myCompare` b
	| a > b 	= GT
	| a == b	= EQ
	| otherwise = LT
-
*Main> 3 `myCompare` 2
GT
</pre>

where
<pre>
bmiTell :: (RealFloat a) => a -> a -> String
bmiTell weight height
	| bmi <= 18.5 = "underweight"
	| bmi <= 25.0 = "normal"
	| bmi <= 30.0 = "fat"
	| otherwise = "..."
	where bmi = weight / height ^ 2
</pre>

<pre>
bmiTell :: (RealFloat a) => a -> a -> String
bmiTell weight height
	| bmi <= skinny = "underweight"
	| bmi <= normal = "normal"
	| bmi <= fat = "fat"
	| otherwise = "..."
	where bmi = weight / height ^ 2
      	skinny = 18.5
      	normal = 25.0
      	fat = 30.0
</pre>

<pre>
bmiTell :: (RealFloat a) => a -> a -> String
bmiTell weight height
	| bmi <= skinny = "underweight"
	| bmi <= normal = "normal"
	| bmi <= fat = "fat"
	| otherwise = "..."
	where bmi = weight / height ^ 2
       (skinny, normal, fat) = (18.5, 25.0, 30.0)
</pre>

<pre>
initials :: String -> String -> String
initials firstname lastname = [f] ++ ". " ++ [l] ++ "."
	where (f:_) = firstname
      	(l:_) = lastname
-
*Main> initials "LEE" "KWANYUN"
"L. K."
</pre>

Just like we've defined csontants in where blocks, you can also define functions.
<pre>
calcBmis :: (RealFloat a) => [(a, a)] -> [a]
calcBmis xs = [bmi w h | (w, h) <-xs]
    where bmi weight height = weight / height ^ 2
</pre>

let bindings
let bindings let you bind to variables anywhere and are expressions themselves, but are very local. so they don't span across guards.
<pre>
cylinder :: (RealFloat a) => a -> a -> a
cylinder r h =
	let sideArea = 2 * pi * r * h
    	topArea = pi * r ^2
	in sideArea + 2 * topArea

-
*Main> cylinder 2 3
62.83185307179586
</pre>

Case
<pre>
head' :: [a] -> a  
--head' [] = error "Can't call head on an empty list, dummy!"  
--head' (x:_) = x  
head' xs = case xs of [] -> error "Can't call head on an empty list, dummy!"
                      (x:_) -> x
</pre>
